==================================== CODENVY PHP APP ====================================

Create a Codenvy Account and create a PHP Workspace.

This is checked into GitHub but if you start from SDK Laravel Template then you will need to install:
	Install Guzzle for a HTTP Client to make REST API calls easy
		1. See instructions at: http://guzzle.readthedocs.io/en/latest/overview.html
		2. Update composer.json file in project under requires add "guzzlehttp/guzzle": "~6.0",
		3. Run composer to install Guzzle: php ../composer.phar require guzzlehttp/guzzle:~6.0 (assuming composer.phar is one directory up from project)

	Install Lavacharts for Charting made easy
		1. See instructions at: http://lavacharts.com
		2. Update composer.json file in project under requires add "khill/lavacharts" : "3.0.*",
		3. Run composer to install Lavacharts: php ../composer.phar require khill/lavacharts (assuming composer.phar is one directory up from project)

To get Codenvy to run use the following steps:
	1. Start the Workspace.
	2. Fix permissions on Codenvy: 
		1. Run the following in Codenvy Terminal - sudo find /projects/cloudapp -type d -exec chmod 777 {} \;
	3. Fix up .htaccess for Laravel project by updating apache2.conf:
		1. cd /etc/apache2
		2. sudo chmod 777 apache2.conf
		3. sudo apt-get install nano
		4. nano apache2.conf
		5. Scroll down to to Virtual Directorys for /project and set AllowOverride to All
		6. Restart Apache
	4. Import your PHP App from Github or simply import the Cloud Workshop app at https://github.com/markreha/cloudapp
	5. Start Apache from the Command Tools
		
================================ CODENVY JAVA =====+++==================================

Create a Codenvy Account, import the Stack 'Codeenvy Custom Tomcat MySQL Stack Recipe' from the SDK, and create a Java-MySQL-Mark Workspace.

Import Project: 
	Import your Java App from Github or simply import the Cloud Workshop at https://github.com/markreha/cloudservices
	Select Project Configuration type as Java, click next, set Source Folder or src in project, click Save.
	Run the Build and Deploy command from the Command Palette.
	Select Project->Configure Classpath menu items, in the Java Build Path add javax.ws.rs-api-2.0.jar and slf4j-api-1.7.5.jar from the target/cloudservices/WEB-INF folder.

Building, Deploying, and Running App:
	Setup the config.properties under the src\config\dev folder. Domain is db, username is petclinic and password is password.
	Run the Start Tomcat command from the Command Palette to start the Tomcat Server.
	Run the Build and Deploy command from the Command Palette to start the Tomcat Server.
	Click on the Preview URL from the Start Tomcat command to run the application. 

Debugging:
	Make sure the Start Tomcat command was run with the 'jpda' command line argument.
	In Codenvy click the Run->Edit Debug Configurations menu items, select the Remote Java configuration, click the Debug button.
	
Database Setup:
	Start the Workspace, in the Workspace Runtime configuration expand the DB Server to locate the DB URL and Port. 
	Using MySQL Workbench log in as root user and run IoT.sql script. Also add iot schema privileges to petclinic user.

Issue: MySQL DB loses all data on Workspace save and restart
Resolution: Use the kaloyanraev/mysql-no-volume Docker image and the Java-MySQL-Mark Stack (see the  'Codeenvy Custom Tomcat MySQL Stack Recipe' from the SDK)
	To create your own Java-MySQL-Mark Stack copy the Java-MySQL Stack, change the MySQL Docker image to the kaloyanraev/mysql-no-volume Docker image, and customize with Mark's Commands.

Issue: Mark's Commands get lost when Workspace is snapshotted
Resolution: Add them back manually:
	Build and Deploy
		mvn clean package -f ${current.project.path} -Pdev
		echo Deploying ${current.project.path}/target/cloadservices.war to $TOMCAT_HOME/webapps/cloudservices.war ......
		cp ${current.project.path}/target/cloadservices.war $TOMCAT_HOME/webapps/cloudservices.war
		echo Deployed ${current.project.path}/target/cloadservices.war
	PreviewUr: http://${server.port.8080}/${current.project.relpath}
	
	Start Tomcat
      	$TOMCAT_HOME/bin/catalina.sh jpda run 2>&1
	PreviewUr: http://${server.port.8080}/${current.project.relpath}

	Stop Tomcat        
    	$TOMCAT_HOME/bin/catalina.sh stop

Other Tools:
	Install MyAdmin Chrome App from the Chrome Web App Store. 
	
================================ OPENSHIFT V3 =======================================

Create two OpenShift v3 accounts: use one account for the Java REST API Spring MySQL project and use another account for the PHP Laravel project.
	Project Type: OPenShift JBoss Tomcat 8 image for the REST API Spring MySQL project
	Project Type: MySQL datastore image for the REST API Spring MySQL project
	Project Type: PHP 7.0 image for PHP Laravel project
	NOTE: The Tomcat Container needs to be grouped with the MySQL Container
	
Initialize MySQl Database (https://docs.openshift.com/online/dev_guide/migrating_applications/database_applications.html)
	1) Run to get MySQL Pod Name: ./oc get pods
	2) Copy IoT.sql from SDK into a directory called db
	3) Copy SQL script to OpenShift MySQL Pod: ./oc rsync /local/db <mysql_pod_name>:/var/lib/mysql/data
	4) Remote into MySQL Pod: ./oc rsh <mysql_pod> then run cd /var/lib/mysql/data
	5) Run SQL Script: mysql -u root then run source all.sql
	6) Grant privileges to petclinic user: grant all privileges on iot.* to petclinic then run flush privileges
	
Issue: Not enough quota during deployment
Resolution: Applications -> Deployments -> select app -> Actions -> Edit and change deployment strategy from Rolling to Recreate.

