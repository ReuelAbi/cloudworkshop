==================================== CODENVY PHP APP ====================================

Create a Codenvy Account and create a PHP Workspace.

This is checked into GitHub but if you start from SDK Laravel Template then you will need to install:
	Install Guzzle for a HTTP Client to make REST API calls easy
		1. See instructions at: http://guzzle.readthedocs.io/en/latest/overview.html
		2. Update composer.json file in project located in the root of the project:
			- Under the requires section add entry "guzzlehttp/guzzle": "~6.0"
		3. Update project in Eclipse:
			- Right click on project in Eclipse and select the Composter->Update Build Path menu options
			- Run composer to install Guzzle: php ../composer.phar require guzzlehttp/guzzle:~6.0 (assuming composer.phar is one directory up from project)

	Install Lavacharts for Charting made easy
		1. See instructions at: http://lavacharts.com
		2. Update composer.json file in project under requires add "khill/lavacharts" : "3.0.*",
		3. Run composer to install Lavacharts: php ../composer.phar require khill/lavacharts (assuming composer.phar is one directory up from project)

To get Codenvy to run use the following steps:
	1. Start the Workspace.
	2. Fix permissions on Codenvy: 
		1. Run the following in Codenvy Terminal - sudo find /projects/cloudapp -type d -exec chmod 777 {} \;
	3. Fix up .htaccess for Laravel project by updating apache2.conf:
		1. cd /etc/apache2
		2. sudo chmod 777 apache2.conf
		3. sudo apt-get install nano
		4. nano apache2.conf
		5. Scroll down to to Virtual Directorys for /project and set AllowOverride to All
		6. Restart Apache
	4. Import your PHP App from Github or simply import the Cloud Workshop app at https://github.com/markreha/cloudapp
	5. Start Apache from the Command Tools
		
================================ CODENVY JAVA =====+++==================================

Create a Codenvy Account, import the Stack 'Codeenvy Custom Tomcat MySQL Stack Recipe' from the SDK, and create a Java-MySQL-Mark Workspace.

Import Project: 
	Import your Java App from Github or simply import the Cloud Workshop at https://github.com/markreha/cloudservices
	Select Project Configuration type as Java, click next, set Source Folder or src in project, click Save.
	Run the Build and Deploy command from the Command Palette.
	Select Project->Configure Classpath menu items, in the Java Build Path add javax.ws.rs-api-2.0.jar and slf4j-api-1.7.5.jar from the target/cloudservices/WEB-INF folder.

Building, Deploying, and Running App:
	Setup the config.properties under the src\config\dev folder. Domain is db, username is petclinic and password is password.
	Run the Start Tomcat command from the Command Palette to start the Tomcat Server.
	Run the Build and Deploy command from the Command Palette to start the Tomcat Server.
	Click on the Preview URL from the Start Tomcat command to run the application. 

Debugging:
	Make sure the Start Tomcat command was run with the 'jpda' command line argument.
	In Codenvy click the Run->Edit Debug Configurations menu items, select the Remote Java configuration, click the Debug button.
	
Database Setup:
	Start the Workspace, in the Workspace Runtime configuration expand the DB Server to locate the DB URL and Port. 
	Using MySQL Workbench log in as root user and run IoT.sql script. Also add iot schema privileges to petclinic user.

Issue: MySQL DB loses all data on Workspace save and restart
Resolution: Use the kaloyanraev/mysql-no-volume Docker image and the Java-MySQL-Mark Stack (see the  'Codeenvy Custom Tomcat MySQL Stack Recipe' from the SDK)
	To create your own Java-MySQL-Mark Stack copy the Java-MySQL Stack, change the MySQL Docker image to the kaloyanraev/mysql-no-volume Docker image, and customize with Mark's Commands.

Issue: Mark's Commands get lost when Workspace is snapshotted
Resolution: Add them back manually:
	Build and Deploy
		mvn clean package -f ${current.project.path} -Pdev
		echo Deploying ${current.project.path}/target/cloadservices.war to $TOMCAT_HOME/webapps/cloudservices.war ......
		cp ${current.project.path}/target/cloadservices.war $TOMCAT_HOME/webapps/cloudservices.war
		echo Deployed ${current.project.path}/target/cloadservices.war
	PreviewUr: http://${server.port.8080}/${current.project.relpath}
	
	Start Tomcat
      	$TOMCAT_HOME/bin/catalina.sh jpda run 2>&1
	PreviewUr: http://${server.port.8080}/${current.project.relpath}

	Stop Tomcat        
    	$TOMCAT_HOME/bin/catalina.sh stop

Other Tools:
	Install MyAdmin Chrome App from the Chrome Web App Store. 
	
================================ OPENSHIFT V3 =======================================

Create two OpenShift v3 accounts: use one account for the Java REST API Spring MySQL project and use another account for the PHP Laravel project.
	Project Type: OpenShift Wildfly image for the REST API Spring MySQL project
	Project Type: MySQL datastore image for the REST API Spring MySQL project
	Project Type: PHP 7.0 image for PHP Laravel project
	
Initialize MySQl Database using RSH (https://docs.openshift.com/online/dev_guide/migrating_applications/database_applications.html)
	1) Log into OpenShift: ./oc [OpenShift Online Web Console URL]
	2) Get your MySQL Pod Name: ./oc get pods
	3) Copy the IoT.sql DDL script from SDK into a directory called db under the folder where you run oc
	4) Copy the SQL DDL script to OpenShift your MySQL Pod: ./oc rsync /local/db <mysql_pod_name>:/var/lib/mysql/data
	5) Remote into your MySQL Pod: ./oc rsh <mysql_pod>
	6) Navigate to the MySQL data directory: cd /var/lib/mysql/data
	7) Run the SQL DDL script on MySQL by executing the following commands: 
		a) mysql -u root
		b) source db/IoT.sql
	7) Grant privileges to your MySQL user by executing the following commands: 
		a) grant all privileges on iot.* to [your MySQL username]
		b) flush privileges
		c) exit
Initialize MySQl Database using Port Forwarding and MySQL Workbench (https://blog.openshift.com/openshift-connecting-database-using-port-forwarding/)
	1) Log into OpenShift: ./oc [OpenShift Online Web Console URL]
	2) Get your MySQL Pod Name: ./oc get pods
	3) To find your MySQL Database IP, Port, and Credentials using RSH into the MySQL Database Pod and dumping the environment variables related to MySQL:
		a) ./oc rsh [MYSQL_POD]
		b) env | grep MYSQL
		c) exit
	4) Run a Port Forward: ./oc port-forward [MYSQL_POD] [MYSQL_WORKBENCH_LOCAL_PORT]:[MYSQL_PORT]
		a) This will not permanent and will do port forwarding as long as your Terminal Session is running
	5) Run MySQL Workbench connecting to 127.0.0.1, [MYSQL_WORKBENCH_LOCAL_PORT], your MySQL Database credentials
		a) Run the IoT.sql DDL script from SDK
		b) Exit MySQL Workbench
		c) Exit the Terminal Session by entering Ctrl-C
	
Issue: You many not have enough POD quota during build and deployment.
Resolution: Applications -> Deployments -> select app -> Actions -> Edit and change deployment strategy from Rolling to Recreate.

Create two OpenShift v3 accounts: use one account for the Java REST API Spring MySQL project and use another account for the PHP Laravel project.

================================ AZURE =============================================

Create an Azure account. If you are a Grand Canyon University student this is free via your Microsoft Imagine account. You will need to create the following containers in Azure:
	1. Log into the Azure Portal.
	1. Click the '+ Create a resource' icon from the Azure Portal and search for PHP.
	2. Select the PHP Starter Kit Application to create a PHP container.
		- See the Getting Started Building the IoT Apps on Github for details on how to build and deploy the Reporting Application.
	3. Click the '+ Create a resource' icon from the Azure Portal and search for Tomcat.
	4. Select the Apache Tomcat 8 Application from Microsoft to create a Tomcat / MySQL Container.
		- See the Getting Started Building the IoT Apps on Github for details on how to build and deploy the Services Application.

================================ GOOGLE =============================================

Create a Google Cloud Platform account. This requires a credit card but is absolutely free for 12 months. 
You will need to create the following containers in the Google Cloud Platform:
	1. Log into the Google Cloud Platform.
	2. Create a Project for the PHP Reporting Application.
	3. Click the App Engine menu. Create an App Engine application of type PHP.
		- See the Getting Started Building the IoT Apps on Github for details on how to build and deploy the Reporting Application.
	4. Create another Project for the Java Services Application and MySQL Database.
	5. Click the SQL menu. Create a SQL MySQL instance (of type Second Generation).
		- See the Getting Started Building the IoT Apps on Github for details on how to setup the schema for the MySQL Database.
	6. Click the App Engine menu. Create an App Engine application of type Java.
		- See the Getting Started Building the IoT Apps on Github for details on how to build and deploy the Services Application.

================================ AMAZON =============================================

Create a Amazon AWS Cloud Platform account. This requires a credit card but is absolutely free for 12 months. 

Create and configure the AWS PHP Application:
1. Update app code in source control (see SDK):
	- Update APP_ENV to amazon in .env 
2. Log into AWS and select Services from the main menu.
3. Select Elastic Beanstalk service.
4. Click the 'Create new Application' link from the top right menu.
5. Give your Application Name (i.e. ReportingApp). Click the Create button.
6. Create your Application Environment by clicking the 'Create one now' link.
7. Select the 'Web server environment' and click the Select button.
8. Fill out the following fields in the Creating web server environment form:
	a. From Environment information Domain: 
		- Give your Application a name (i.e. reporting-app).
	b. From Base configuration: 
		- Select PHP from the Preconfigured platform options.
		- Upload a ZIP file of your PHP application.
	c. Click the Create Environment button. Wait for environment to get built.
	d. From the Elastic Beanstalk application screen click the App URL to validate application is running properly.

Create and configure the AWS MySQL databsae:
1. Log into AWS and select Services from the main menu.
2. Select RDS.
3. Under the Create database section click the Create database button.
4. Select the MySQL engine option and the 5.6 version edition radio button. Check the 'Enable options for free tier'. Click the Next button.
5. Fill out the Specify DB details form:
	a. From Settings enter DB instance identifier enter instance name (i.e. mydatabaseinstance).
	b. From Settings enter Master username and password.
	c. Click the Next button.
	d. Leave all defaults in the Configure advanced settings form.
6. From the RDS Dashboard select your database instance.
	a. Your database URL is listed under the Connect section under the Endpoint value.
	b. In MySQL Workbench setup a connection using the AWS Database Endpoint URI and credentials. Create the 'iot' schema and tables by running the DDL script from the SDK.
	c. Make your database accessible from a Java application by clicking the Security groups link under the Details section for the database.
		- In the Security Group setup select the Inbound tab. Click the Edit button. Under the Source dropdown select the Anywhere option.

Create and configure the AWS Tomcat Application:
1. Update app code in source control (see SDK):
	- Set up config folder and Maven Profile. 
2. Log into AWS and select Services from the main menu.
3. Select Elastic Beanstalk service.
4. Click the 'Create new Application' link from the top right menu.
5. Give your Application Name (i.e. ServicesApp). Click the Create button.
6. Create your Application Environment by clicking the 'Create one now' link.
7. Select the 'Web server environment' and click the Select button.
8. Fill out the following fields in the Creating web server environment form:
	a. From Environment information Domain: 
		- Give your Application a name (i.e. services-app).
	b. From Base configuration: 
		- Select Tomcat from the Preconfigured platform options.
		- Upload a WAR file of your Java application.
	c. Click the Create Environment button. Wait for environment to get built.
	d. From the Elastic Beanstalk application screen click the App URL to validate application is running properly.

